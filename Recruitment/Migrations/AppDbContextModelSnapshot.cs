// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recruitment.Data;

namespace Recruitment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Recruitment.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantAcademics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<string>("CourseName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("GradeId");

                    b.Property<string>("GradeName");

                    b.Property<int>("InstitutionId");

                    b.Property<string>("InstitutionName");

                    b.Property<bool>("IsCourseVerified");

                    b.Property<bool>("IsGradeVerified");

                    b.Property<bool>("IsInstitutionVerified");

                    b.Property<int>("QualificationId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantAcademics");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantAuthenticationInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ApplicantId");

                    b.Property<string>("EmailAddress");

                    b.Property<long?>("IdNavigationId");

                    b.Property<string>("IsEmailVerified");

                    b.Property<DateTime?>("IsEmailVerifiedDate");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<DateTime?>("LastPasswordChangedDate");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.HasIndex("IdNavigationId")
                        .IsUnique()
                        .HasFilter("[IdNavigationId] IS NOT NULL");

                    b.ToTable("ApplicantAuthenticationInfo");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantBiodata", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("ApplicantLevelId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<long?>("GenderId");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<long?>("MaritalStatusId");

                    b.Property<string>("OtherName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserId");

                    b.Property<int>("YearsOfExperience");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantLevelId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantBiodatas");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<int>("DocumentTypeId");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("UserId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantDocuments");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantExperience", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<long?>("IndustryId");

                    b.Property<string>("JobDescription");

                    b.Property<long?>("JobRoleId");

                    b.Property<long?>("JobTypeId");

                    b.Property<string>("StartDate");

                    b.Property<string>("StopDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId")
                        .IsUnique()
                        .HasFilter("[IndustryId] IS NOT NULL");

                    b.HasIndex("JobRoleId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantExperience");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Level")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ApplicantLevels");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantProfiles");
                });

            modelBuilder.Entity("Recruitment.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Recruitment.Models.DocumentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DocumentCategories");
                });

            modelBuilder.Entity("Recruitment.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("UniqueCode");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Recruitment.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ErrorDate");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("ErrorSource");

                    b.Property<string>("ErrorStackTrace");

                    b.Property<string>("InnerException");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Recruitment.Models.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Recruitment.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Recruitment.Models.Industry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("Recruitment.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Recruitment.Models.JobRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<long?>("IndustryId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IndustryId");

                    b.ToTable("JobRoles");
                });

            modelBuilder.Entity("Recruitment.Models.JobTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("Recruitment.Models.MaritalStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationDepartments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("DepartmentName")
                        .IsRequired();

                    b.Property<bool>("IsHeadOffice");

                    b.Property<long>("RecruitmentLocationId");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentLocationId");

                    b.ToTable("OrganizationDepartments");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<long>("OrganizationId");

                    b.Property<string>("OrganizationUserId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationUserId");

                    b.ToTable("OrganizationDocuments");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationJobRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<long?>("DepartmentId");

                    b.Property<string>("JobRoleName");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("OrganisationJobRoles");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation");

                    b.Property<string>("Address");

                    b.Property<string>("CompanyName")
                        .IsRequired();

                    b.Property<string>("ContactEmail");

                    b.Property<string>("ContactFirstName")
                        .IsRequired();

                    b.Property<string>("ContactLastName")
                        .IsRequired();

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("HeadQuarterAddress");

                    b.Property<long?>("IndustryId");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("OrganizationJobRolesId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("OrganizationJobRolesId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizationProfiles");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<long>("OrganizationId");

                    b.Property<string>("OrganizationUserId");

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationUserId");

                    b.ToTable("OrganizationRoles");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<long>("ProfileId");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RoleId");

                    b.ToTable("OrganizationUserRoles");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationUsersInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Firstname");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Lastname");

                    b.Property<long?>("OrganisationId");

                    b.Property<long?>("OrganizationRolesId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OrganizationRolesId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizationUsersInfo");
                });

            modelBuilder.Entity("Recruitment.Models.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantLevelId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicantLevelId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("Recruitment.Models.RecruitmentLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsHeadOfficeStructure");

                    b.Property<string>("Location");

                    b.Property<long>("OrganizationProfileId");

                    b.Property<string>("OrganizationUserId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationProfileId");

                    b.HasIndex("OrganizationUserId");

                    b.HasIndex("TypeId");

                    b.ToTable("RecruitmentLocations");
                });

            modelBuilder.Entity("Recruitment.Models.RecruitmentLocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationType");

                    b.HasKey("Id");

                    b.ToTable("RecruitmentLocationTypes");
                });

            modelBuilder.Entity("Recruitment.Models.UserAccessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("type");

                    b.HasKey("Id");

                    b.ToTable("UserAccessTypes");
                });

            modelBuilder.Entity("Recruitment.Models.UserFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Function");

                    b.HasKey("Id");

                    b.ToTable("UserFunctions");
                });

            modelBuilder.Entity("Recruitment.Models.UserRoleFunctionAccess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessId");

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<int>("FunctionId");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("AccessId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoleFunctionAccess");
                });

            modelBuilder.Entity("Recruitment.Models.VerificationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName");

                    b.HasKey("Id");

                    b.ToTable("VerificationStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Recruitment.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Recruitment.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Recruitment.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantAcademics", b =>
                {
                    b.HasOne("Recruitment.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Models.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Models.Qualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantAuthenticationInfo", b =>
                {
                    b.HasOne("Recruitment.Models.ApplicantAuthenticationInfo", "IdNavigation")
                        .WithOne("InverseIdNavigation")
                        .HasForeignKey("Recruitment.Models.ApplicantAuthenticationInfo", "IdNavigationId");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantBiodata", b =>
                {
                    b.HasOne("Recruitment.Models.ApplicantLevel", "ApplicantLevel")
                        .WithMany()
                        .HasForeignKey("ApplicantLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Recruitment.Models.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantDocument", b =>
                {
                    b.HasOne("Recruitment.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantExperience", b =>
                {
                    b.HasOne("Recruitment.Models.Industry", "Industry")
                        .WithOne("ApplicantExperienceInfo")
                        .HasForeignKey("Recruitment.Models.ApplicantExperience", "IndustryId");

                    b.HasOne("Recruitment.Models.JobRoles", "JobRole")
                        .WithMany("ApplicantExperience")
                        .HasForeignKey("JobRoleId");

                    b.HasOne("Recruitment.Models.JobTypes", "JobType")
                        .WithMany("ApplicantExperience")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Recruitment.Models.ApplicantProfile", b =>
                {
                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recruitment.Models.DocumentType", b =>
                {
                    b.HasOne("Recruitment.Models.DocumentCategory", "DocumentCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recruitment.Models.ErrorLog", b =>
                {
                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Recruitment.Models.JobRoles", b =>
                {
                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Recruitment.Models.Industry", "Industry")
                        .WithMany("JobRoles")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationDepartments", b =>
                {
                    b.HasOne("Recruitment.Models.RecruitmentLocation", "RecruitmentLocation")
                        .WithMany()
                        .HasForeignKey("RecruitmentLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationDocument", b =>
                {
                    b.HasOne("Recruitment.Models.OrganizationProfile", "OrganizationProfile")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("OrganizationUserId");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationJobRoles", b =>
                {
                    b.HasOne("Recruitment.Models.OrganizationDepartments", "Department")
                        .WithMany("OrganisationJobRoles")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationProfile", b =>
                {
                    b.HasOne("Recruitment.Models.Industry", "Industry")
                        .WithMany("OrganisationInfo")
                        .HasForeignKey("IndustryId");

                    b.HasOne("Recruitment.Models.OrganizationJobRoles", "OrganizationJobRoles")
                        .WithMany()
                        .HasForeignKey("OrganizationJobRolesId");

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationRoles", b =>
                {
                    b.HasOne("Recruitment.Models.OrganizationProfile", "OrganizationProfile")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("OrganizationUserId");
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationUserRole", b =>
                {
                    b.HasOne("Recruitment.Models.OrganizationUsersInfo", "OrganizationUser")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Models.OrganizationRoles", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recruitment.Models.OrganizationUsersInfo", b =>
                {
                    b.HasOne("Recruitment.Models.OrganizationProfile", "Organisation")
                        .WithMany("OrganizationUsersInfo")
                        .HasForeignKey("OrganisationId");

                    b.HasOne("Recruitment.Models.OrganizationRoles")
                        .WithMany("OrganizationUsersInfo")
                        .HasForeignKey("OrganizationRolesId");

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Recruitment.Models.Qualification", b =>
                {
                    b.HasOne("Recruitment.Models.ApplicantLevel", "ApplicantLevel")
                        .WithMany()
                        .HasForeignKey("ApplicantLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recruitment.Models.RecruitmentLocation", b =>
                {
                    b.HasOne("Recruitment.Models.OrganizationProfile", "OrganizationProfile")
                        .WithMany()
                        .HasForeignKey("OrganizationProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("OrganizationUserId");

                    b.HasOne("Recruitment.Models.RecruitmentLocationType", "RecruitmentLocationType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recruitment.Models.UserRoleFunctionAccess", b =>
                {
                    b.HasOne("Recruitment.Models.UserAccessType", "UserAccessType")
                        .WithMany()
                        .HasForeignKey("AccessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Recruitment.Models.UserFunction", "UserFunction")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruitment.Models.OrganizationRoles", "OrganizationRoles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
